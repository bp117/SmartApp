import React from 'react';
import { render, screen } from '@testing-library/react';
import Message from './Message';

describe('Message Component', () => {
  it('should render user message', () => {
    const content = 'Hello from user!';
    render(<Message role="user" content={content} theme="dark" />);
    expect(screen.getByText(content)).toBeInTheDocument();
  });

  it('should render bot message with multiple responses', () => {
    const content = [
      {
        context: 'This is the context for response 1',
        book: 'Book 1',
        section_title: 'Section Title 1',
        hyperlink: 'https://example.com/response1',
        generated_resp: 'This is the generated response for response 1',
      },
      {
        context: 'This is the context for response 2',
        book: 'Book 2',
        section_title: 'Section Title 2',
        hyperlink: 'https://example.com/response2',
        generated_resp: 'This is the generated response for response 2',
      },
    ];

    render(<Message role="bot" content={content} theme="dark" />);

    for (const response of content) {
      expect(screen.getByText(response.context)).toBeInTheDocument();
    }
  });

  it('should render bot message with typing indicator', () => {
    render(<Message role="bot" botIsTyping={true} theme="dark" />);
    expect(screen.getByRole('img', { name: 'Typing indicator' })).toBeInTheDocument();
  });

  it('should copy message content on copy button click', () => {
    const content = 'Hello from user!';
    const mockCopyClipboard = jest.spyOn(navigator.clipboard, 'writeText');
    const mockHandleCopy = jest.fn();

    render(<Message
      role="user"
      content={content}
      handleCopy={mockHandleCopy}
      theme="dark"
    />);

    const copyButton = screen.getByRole('button', { name: 'Copy' });

    copyButton.click();

    expect(mockHandleCopy).toHaveBeenCalledTimes(1);
    expect(mockCopyClipboard).toHaveBeenCalledWith(content);
  });

  it('should update feedback state on feedback button click', () => {
    const mockHandleFeedback = jest.fn();

    render(<Message
      role="bot"
      content="Hello from bot!"
      handleFeedback={mockHandleFeedback}
      theme="dark"
    />);

    const thumbsUpButton = screen.getByRole('button', { name: 'Thumbs up' });
    const thumbsDownButton = screen.getByRole('button', { name: 'Thumbs down' });

    thumbsUpButton.click();
    expect(mockHandleFeedback).toHaveBeenCalledWith('up');

    thumbsDownButton.click();
    expect(mockHandleFeedback).toHaveBeenCalledWith('down');
  });

  it('should trigger summarize action on summarize button click', () => {
    const mockHandleSummarize = jest.fn();
    const mockSetSummaryResponse = jest.fn();

    const context = 'This is the context for the response';
    render(<Message
      role="bot"
      content={[{ context }]}
      handleSummarize={mockHandleSummarize}
      setSummaryResponse={mockSetSummaryResponse}
      theme="dark"
    />);

    const summarizeButton = screen.getByRole('button', { name: 'Summarize' });

    summarizeButton.click();

    expect(mockHandleSummarize).toHaveBeenCalledWith(context);
  });

  it('should toggle enhanced state on enhance button click', () => {
    const mockSetIsEnhanced = jest.fn();

    render(<Message
      role="bot"
      content={[{ context: 'This is the context for the response' }]}
      setIsEnhanced={mockSetIsEnhanced}
      theme="dark"
    />);

    const enhanceButton = screen.getByRole('button', { name: 'Enhance' });

    enhanceButton.click();

    expect(mockSetIsEnhanced).toHaveBeenCalledTimes(1);
  });

 it('should render summary response if available', () => {
  const summaryResponse = {
    duration: '10 seconds',
    result: {
      generated_resp: 'This is the summarized response',
    },
  };

  render(<Message
    role="bot"
    content={[{ context: 'This is the context for the response' }]}
    theme="dark"
    setIsSummarized={() => {}}
    isSummarized={true}
    setIsEnhanced={() => {}}
    isEnhanced={false}
    setSelectedTabContext={() => {}}
    selectedTabContext="response 1"
    summaryResponse={summaryResponse}
    setSummaryResponse={() => {}}
  />);

  const summaryAccordion = screen.getByRole('button', { name: 'Expand summary' });
  summaryAccordion.click();
  const summaryContent = screen.getByText(summaryResponse.result.generated_resp);

  expect(summaryContent).toBeInTheDocument();
});

it('should hide summary response if isSummarized is false', () => {
  const summaryResponse = {
    duration: '10 seconds',
    result: {
      generated_resp: 'This is the summarized response',
    },
  };

  render(<Message
    role="bot"
    content={[{ context: 'This is the context for the response' }]}
    theme="dark"
    setIsSummarized={() => {}}
    isSummarized={false}
    setIsEnhanced={() => {}}
    isEnhanced={false}
    setSelectedTabContext={() => {}}
    selectedTabContext="response 1"
    summaryResponse={summaryResponse}
    setSummaryResponse={() => {}}
  />);

  expect(screen.queryByRole('button', { name: 'Expand summary' })).not.toBeInTheDocument();
});
