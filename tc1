import React from 'react';
import { render } from '@testing-library/react';
import Message from './Message';

describe('Message Component', () => {
  it('should render user message', () => {
    const content = 'Hello from user!';
    const wrapper = render(
      <Message
        role="user"
        content={content}
        theme="dark"
        setIsSummarized={() => {}}
        isSummarized={false}
        setIsEnhanced={() => {}}
        isEnhanced={false}
        setSelectedTabContext={() => {}}
        selectedTabContext="response 1"
        summaryResponse={null}
        setSummaryResponse={() => {}}
      />
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should render bot message with multiple responses', () => {
    const content = [
      {
        context: 'This is the context for response 1',
        book: 'Book 1',
        section_title: 'Section Title 1',
        hyperlink: 'https://example.com/response1',
        generated_resp: 'This is the generated response for response 1',
      },
      {
        context: 'This is the context for response 2',
        book: 'Book 2',
        section_title: 'Section Title 2',
        hyperlink: 'https://example.com/response2',
        generated_resp: 'This is the generated response for response 2',
      },
    ];

    const wrapper = render(
      <Message
        role="bot"
        content={content}
        theme="dark"
        setIsSummarized={() => {}}
        isSummarized={false}
        setIsEnhanced={() => {}}
        isEnhanced={false}
        setSelectedTabContext={() => {}}
        selectedTabContext="response 1"
        summaryResponse={null}
        setSummaryResponse={() => {}}
      />
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should render bot message with typing indicator', () => {
    const wrapper = render(
      <Message
        role="bot"
        botIsTyping={true}
        theme="dark"
        setIsSummarized={() => {}}
        isSummarized={false}
        setIsEnhanced={() => {}}
        isEnhanced={false}
        setSelectedTabContext={() => {}}
        selectedTabContext="response 1"
        summaryResponse={null}
        setSummaryResponse={() => {}}
      />
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should copy message content on copy button click', () => {
    const content = 'Hello from user!';
    const mockCopyClipboard = jest.spyOn(navigator.clipboard, 'writeText');
    const mockHandleCopy = jest.fn();

    const wrapper = render(
      <Message
        role="user"
        content={content}
        handleCopy={mockHandleCopy}
        theme="dark"
        setIsSummarized={() => {}}
        isSummarized={false}
        setIsEnhanced={() => {}}
        isEnhanced={false}
        setSelectedTabContext={() => {}}
        selectedTabContext="response 1"
        summaryResponse={null}
        setSummaryResponse={() => {}}
      />
    );

    const copyButton = wrapper.find('.cursor-pointer').at(0);

    copyButton.simulate('click');

    expect(mockHandleCopy).toHaveBeenCalledTimes(1);
    expect(mockCopyClipboard).toHaveBeenCalledWith(content);
  });

  it('should update feedback state on feedback button click', () => {
    const mockHandleFeedback = jest.fn();

    const wrapper = render(
      <Message
        role="bot"
        content="Hello from bot!"
        handleFeedback={mockHandleFeedback}
        theme="dark"
        setIsSummarized={() => {}}
        isSummarized={false}
        setIsEnhanced={() => {}}
        isEnhanced={false}
        setSelectedTabContext={() => {}}
        selectedTabContext="response 1"
        summaryResponse={null}
        setSummaryResponse={() => {}}
      />
    );

    const thumbsUpButton = wrapper.find('.cursor-pointer').at(1);
    const thumbsDownButton = wrapper.find('.cursor-pointer').at(2);

     thumbsUpButton.simulate('click');
  expect(mockHandleFeedback).toHaveBeenCalledWith('up');

  thumbsDownButton.simulate('click');
  expect(mockHandleFeedback).toHaveBeenCalledWith('down');
});

it('should trigger summarize action on summarize button click', () => {
  const mockHandleSummarize = jest.fn();
  const mockSetSummaryResponse = jest.fn();

  const context = 'This is the context for the response';
  const wrapper = render(
    <Message
      role="bot"
      content={[{ context }]}
      handleSummarize={mockHandleSummarize}
      setSummaryResponse={mockSetSummaryResponse}
      theme="dark"
      setIsSummarized={() => {}}
      isSummarized={false}
      setIsEnhanced={() => {}}
      isEnhanced={false}
      setSelectedTabContext={() => {}}
      selectedTabContext="response 1"
      summaryResponse={null}
    />
  );

  const summarizeButton = wrapper.find('button').at(0);

  summarizeButton.simulate('click');

  expect(mockHandleSummarize).toHaveBeenCalledWith(context);
});

it('should toggle enhanced state on enhance button click', () => {
  const mockSetIsEnhanced = jest.fn();

  const wrapper = render(
    <Message
      role="bot"
      content={[{ context: 'This is the context for the response' }]}
      setIsEnhanced={mockSetIsEnhanced}
      theme="dark"
      setIsSummarized={() => {}}
      isSummarized={false}
      setIsEnhanced={() => {}}
      isEnhanced={false}
      setSelectedTabContext={() => {}}
      selectedTabContext="response 1"
      summaryResponse={null}
    />
  );

  const enhanceButton = wrapper.find('button').at(1);

  enhanceButton.simulate('click');

  expect(mockSetIsEnhanced).toHaveBeenCalledTimes(1);
});

it('should render summary response if available', () => {
  const summaryResponse = {
    duration: '10 seconds',
    result: {
      generated_resp: 'This is the summarized response',
    },
  };

  const wrapper = render(
    <Message
      role="bot"
      content={[{ context: 'This is the context for the response' }]}
      theme="dark"
      setIsSummarized={() => {}}
      isSummarized={true}
      setIsEnhanced={() => {}}
      isEnhanced={false}
      setSelectedTabContext={() => {}}
      selectedTabContext="response 1"
      summaryResponse={summaryResponse}
      setSummaryResponse={() => {}}
    />
  );

  const summaryAccordion = wrapper.find('Accordion');
  const summaryContent = wrapper.find('Typography').text();

  expect(summaryAccordion).toBeInTheDocument();
  expect(summaryContent).toBe(summaryResponse.result.generated_resp);
});

it('should hide summary response if isSummarized is false', () => {
  const summaryResponse = {
    duration: '10 seconds',
    result: {
      generated_resp: 'This is the summarized response',
    },
  };

  const wrapper = render(
    <Message
      role="bot"
      content={[{ context: 'This is the context for the response' }]}
      theme="dark"
      setIsSummarized={() => {}}
      isSummarized={false}
      setIsEnhanced={() => {}}
      isEnhanced={false}
      setSelectedTabContext={() => {}}
      selectedTabContext="response 1"
      summaryResponse={summaryResponse}
      setSummaryResponse={() => {}}
    />
  );

  const summaryAccordion = wrapper.find('Accordion');

  expect(summaryAccordion).not.toBeInTheDocument();
});


