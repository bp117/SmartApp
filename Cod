To implement pagination and sorting in the CRUD table component using Material-UI, you'll need to extend the component's functionality. This includes:

1. **State for Pagination and Sorting**: Keep track of the current page, the number of rows per page, and the sorting criteria.

2. **Handlers for Pagination and Sorting**: Functions to handle page changes, rows per page changes, and sorting.

3. **Modified Data Rendering**: Adjust the data rendering logic to accommodate pagination and sorting.

Here's how you can implement this:

### 1. Update the `CrudTable` Component

```tsx
import React, { useState } from 'react';
import { Table, TableBody, TableCell, TableHead, TableRow, IconButton, Button, TablePagination, TableSortLabel } from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import CloneIcon from '@mui/icons-material/FileCopy';
import DeleteIcon from '@mui/icons-material/Delete';

interface CrudTableProps {
  headers: string[];
  data: any[];
  onAdd: () => void;
  onEdit: (item: any) => void;
  onClone: (item: any) => void;
  onDelete: (item: any) => void;
}

interface SortState {
  field: string | null;
  direction: 'asc' | 'desc' | null;
}

const CrudTable: React.FC<CrudTableProps> = ({ headers, data, onAdd, onEdit, onClone, onDelete }) => {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [sortState, setSortState] = useState<SortState>({ field: null, direction: null });

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleSort = (field: string) => {
    const isAsc = sortState.field === field && sortState.direction === 'asc';
    setSortState({
      field: field,
      direction: isAsc ? 'desc' : 'asc'
    });
  };

  const sortedData = () => {
    if (!sortState.field || !sortState.direction) return data;
    return [...data].sort((a, b) => {
      if (a[sortState.field] < b[sortState.field]) {
        return sortState.direction === 'asc' ? -1 : 1;
      }
      if (a[sortState.field] > b[sortState.field]) {
        return sortState.direction === 'asc' ? 1 : -1;
      }
      return 0;
    });
  };

  const paginatedData = sortedData().slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);

  return (
    <div>
      <Button onClick={onAdd} style={{ float: 'right' }}>Add</Button>
      <Table>
        <TableHead>
          <TableRow>
            {headers.map(header => (
              <TableCell key={header}>
                <TableSortLabel
                  active={sortState.field === header}
                  direction={sortState.field === header ? sortState.direction : 'asc'}
                  onClick={() => handleSort(header)}
                >
                  {header}
                </TableSortLabel>
              </TableCell>
            ))}
            <TableCell>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {paginatedData.map((item, index) => (
            <TableRow key={index}>
              {headers.map(header => <TableCell key={header}>{item[header]}</TableCell>)}
              <TableCell>
                <IconButton onClick={() => onEdit(item)}><EditIcon /></IconButton>
                <IconButton onClick={() => onClone(item)}><CloneIcon /></IconButton>
                <IconButton onClick={() => onDelete(item)}><DeleteIcon /></IconButton>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={data.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </div>
  );
};

export default CrudTable;
```

### 2. Using the Updated Component

The usage of the component remains the same as before. You just need to provide the required props.

```tsx
const App = () => {
  // ... same as before

  return (
    <CrudTable
      headers={headers}
      data={data}
      onAdd={handleAdd}
      onEdit={handleEdit}
      onClone={handleClone}
      onDelete={handleDelete}
    />
  );
};
```

 const headers = ['Name', 'Age', 'Email'];
  const data = [{ Name: 'John', Age: 30, Email: 'john@example.com' }, /* ...more data */];

  const handleAdd = () => {/* ... */};
  const handleEdit = (item) => {/* ... */};
  const handleClone = (item) => {/* ... */};
  const handleDelete = (item) => {/* ... */};



import React, { useState } from 'react';
import CrudTable from './CrudTable'; // Import your CrudTable component
import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField } from '@mui/material';

const App = () => {
  const initialFormData = { id: null, Name: '', Age: '', Email: '' };
  const [data, setData] = useState([
    { id: 1, Name: 'John', Age: 30, Email: 'john@example.com' },
    // ... more data
  ]);
  const [openAddEditModal, setOpenAddEditModal] = useState(false);
  const [formData, setFormData] = useState(initialFormData);
  const [openDeleteConfirm, setOpenDeleteConfirm] = useState(false);
  const [deleteItem, setDeleteItem] = useState(null);

  const handleAddEdit = (item = initialFormData) => {
    setFormData(item);
    setOpenAddEditModal(true);
  };

  const handleSave = () => {
    if (formData.id) {
      // Edit
      setData(data.map(item => (item.id === formData.id ? formData : item)));
    } else {
      // Add
      setData([...data, { ...formData, id: Date.now() }]); // Generate a new ID
    }
    setOpenAddEditModal(false);
  };

  const handleDelete = () => {
    setData(data.filter(item => item.id !== deleteItem.id));
    setOpenDeleteConfirm(false);
  };

  const openDeleteDialog = (item) => {
    setDeleteItem(item);
    setOpenDeleteConfirm(true);
  };

  return (
    <div>
      <Button onClick={() => handleAddEdit()}>Add New</Button>
      <CrudTable
        headers={['Name', 'Age', 'Email']}
        data={data}
        onEdit={handleAddEdit}
        onDelete={openDeleteDialog}
      />

      <Dialog open={openAddEditModal} onClose={() => setOpenAddEditModal(false)}>
        <DialogTitle>{formData.id ? 'Edit Item' : 'Add Item'}</DialogTitle>
        <DialogContent>
          <TextField label="Name" fullWidth margin="normal" value={formData.Name} onChange={(e) => setFormData({ ...formData, Name: e.target.value })} />
          <TextField label="Age" fullWidth margin="normal" value={formData.Age} onChange={(e) => setFormData({ ...formData, Age: e.target.value })} />
          <TextField label="Email" fullWidth margin="normal" value={formData.Email} onChange={(e) => setFormData({ ...formData, Email: e.target.value })} />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenAddEditModal(false)}>Cancel</Button>
          <Button onClick={handleSave}>Save</Button>
        </DialogActions>
      </Dialog>

      <Dialog open={openDeleteConfirm} onClose={() => setOpenDeleteConfirm(false)}>
        <DialogTitle>Delete Confirmation</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete this item?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDeleteConfirm(false)}>Cancel</Button>
          <Button onClick={handleDelete}>Delete</Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default App;
