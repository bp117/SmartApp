To implement pagination and sorting in the CRUD table component using Material-UI, you'll need to extend the component's functionality. This includes:

1. **State for Pagination and Sorting**: Keep track of the current page, the number of rows per page, and the sorting criteria.

2. **Handlers for Pagination and Sorting**: Functions to handle page changes, rows per page changes, and sorting.

3. **Modified Data Rendering**: Adjust the data rendering logic to accommodate pagination and sorting.

Here's how you can implement this:

### 1. Update the `CrudTable` Component

```tsx
import React, { useState } from 'react';
import { Table, TableBody, TableCell, TableHead, TableRow, IconButton, Button, TablePagination, TableSortLabel } from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import CloneIcon from '@mui/icons-material/FileCopy';
import DeleteIcon from '@mui/icons-material/Delete';

interface CrudTableProps {
  headers: string[];
  data: any[];
  onAdd: () => void;
  onEdit: (item: any) => void;
  onClone: (item: any) => void;
  onDelete: (item: any) => void;
}

interface SortState {
  field: string | null;
  direction: 'asc' | 'desc' | null;
}

const CrudTable: React.FC<CrudTableProps> = ({ headers, data, onAdd, onEdit, onClone, onDelete }) => {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [sortState, setSortState] = useState<SortState>({ field: null, direction: null });

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleSort = (field: string) => {
    const isAsc = sortState.field === field && sortState.direction === 'asc';
    setSortState({
      field: field,
      direction: isAsc ? 'desc' : 'asc'
    });
  };

  const sortedData = () => {
    if (!sortState.field || !sortState.direction) return data;
    return [...data].sort((a, b) => {
      if (a[sortState.field] < b[sortState.field]) {
        return sortState.direction === 'asc' ? -1 : 1;
      }
      if (a[sortState.field] > b[sortState.field]) {
        return sortState.direction === 'asc' ? 1 : -1;
      }
      return 0;
    });
  };

  const paginatedData = sortedData().slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);

  return (
    <div>
      <Button onClick={onAdd} style={{ float: 'right' }}>Add</Button>
      <Table>
        <TableHead>
          <TableRow>
            {headers.map(header => (
              <TableCell key={header}>
                <TableSortLabel
                  active={sortState.field === header}
                  direction={sortState.field === header ? sortState.direction : 'asc'}
                  onClick={() => handleSort(header)}
                >
                  {header}
                </TableSortLabel>
              </TableCell>
            ))}
            <TableCell>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {paginatedData.map((item, index) => (
            <TableRow key={index}>
              {headers.map(header => <TableCell key={header}>{item[header]}</TableCell>)}
              <TableCell>
                <IconButton onClick={() => onEdit(item)}><EditIcon /></IconButton>
                <IconButton onClick={() => onClone(item)}><CloneIcon /></IconButton>
                <IconButton onClick={() => onDelete(item)}><DeleteIcon /></IconButton>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={data.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </div>
  );
};

export default CrudTable;
```

### 2. Using the Updated Component

The usage of the component remains the same as before. You just need to provide the required props.

```tsx
const App = () => {
  // ... same as before

  return (
    <CrudTable
      headers={headers}
      data={data}
      onAdd={handleAdd}
      onEdit={handleEdit}
      onClone={handleClone}
      onDelete={handleDelete}
    />
  );
};
```
