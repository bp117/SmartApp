To capitalize the first letter of each word in the table headers, you can create a simple utility function to transform the strings. Along with this, I'll provide the complete code for your `App` and `CrudTable` components, incorporating the pagination adjustment when deleting an item.

### Utility Function for Capitalizing Headers

First, let's write a function to capitalize the first letter of each word:

```tsx
const capitalize = (str: string) => {
  return str.replace(/\b(\w)/g, s => s.toUpperCase());
};
```

This function uses a regular expression to find the first letter of each word and converts it to uppercase.

### App Component with Pagination and Capitalized Headers

Here's your `App` component with the necessary logic:

```tsx
import React, { useState } from 'react';
import CrudTable from './CrudTable'; // Adjust the import path as needed
import { Dialog, DialogActions, DialogContent, DialogTitle, TextField, Button } from '@mui/material';

const initialFormData = { id: null, Name: '', Age: '', Email: '' };

const App = () => {
  const [data, setData] = useState([
    { id: 1, Name: 'John', Age: 30, Email: 'john@example.com' },
    // ... more data
  ]);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [openModal, setOpenModal] = useState(false);
  const [formData, setFormData] = useState(initialFormData);

  const handleDelete = (item) => {
    const newData = data.filter(d => d.id !== item.id);
    setData(newData);

    const newTotalPages = Math.ceil(newData.length / rowsPerPage);
    setPage(prevPage => {
      return (prevPage >= newTotalPages) ? Math.max(0, newTotalPages - 1) : prevPage;
    });
  };

  // ... rest of the handle functions

  return (
    <div>
      <CrudTable
        headers={['Name', 'Age', 'Email'].map(capitalize)}
        headerWidths={['w-1/3', 'w-1/4', 'w-1/3']} // Tailwind CSS width classes
        tableWidth="w-full" // Tailwind CSS width class for the table
        data={data}
        page={page}
        rowsPerPage={rowsPerPage}
        setPage={setPage}
        setRowsPerPage={setRowsPerPage}
        onAdd={handleAdd}
        onEdit={handleEdit}
        onClone={handleClone}
        onDelete={handleDelete}
      />
      {/* ... Modal and other components ... */}
    </div>
  );
};

export default App;
```

### CrudTable Component with Configurable Widths and Pagination

```tsx
import React from 'react';
import { Table, TableBody, TableCell, TableHead, TableRow, IconButton, Button, TablePagination } from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import CloneIcon from '@mui/icons-material/FileCopy';
import DeleteIcon from '@mui/icons-material/Delete';

const CrudTable = ({ headers, headerWidths, tableWidth, data, page, rowsPerPage, setPage, setRowsPerPage, onAdd, onEdit, onClone, onDelete }) => {
  const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);

  return (
    <div className={tableWidth}>
      <Button onClick={onAdd} className="float-right">Add</Button>
      <Table>
        <TableHead>
          <TableRow>
            {headers.map((header, index) => (
              <TableCell key={header} className={headerWidths[index] || 'w-auto'}>
                {header}
              </TableCell>
            ))}
            <TableCell>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {(rowsPerPage > 0 ? data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : data).map((row, index) => (
            <TableRow key={index}>
              {/* ... Table row cells ... */}
              <TableCell>
                {/* ... Action buttons ... */}
              </TableCell>
            </TableRow>
          ))}
          {emptyRows > 0 && (
            <TableRow style={{ height: 53 * emptyRows }}>
              <TableCell colSpan={headers.length + 1} />
            </TableRow>
          )}
        </TableBody>
      </Table>
      <TablePagination
        component="div"
        count={data.length}
        page={page}
        rowsPerPage={rowsPerPage}
        onPageChange={(event, newPage) => setPage(newPage)}
        onRowsPerPageChange={(event) => setRowsPerPage(parseInt(event.target.value, 10))}
      />
    </div>
  );
};

export default CrudTable;
```

In these components:

- The `capitalize
