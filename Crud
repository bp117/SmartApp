Certainly! Below is the complete code for your `CrudTable` component, including all props, and the `App` component that utilizes it. This setup will provide a fully functional CRUD table with pagination, add, edit, clone, and delete functionalities, along with capitalized header names.

### App Component

```tsx
import React, { useState } from 'react';
import CrudTable from './CrudTable'; // Adjust the import path as needed
import { Dialog, DialogActions, DialogContent, DialogTitle, TextField, Button } from '@mui/material';

const initialFormData = { id: null, Name: '', Age: '', Email: '' };

const App = () => {
  const [data, setData] = useState([
    { id: 1, Name: 'John', Age: 30, Email: 'john@example.com' },
    // ... more data
  ]);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [openModal, setOpenModal] = useState(false);
  const [formData, setFormData] = useState(initialFormData);

  const handleAdd = () => {
    setFormData(initialFormData);
    setOpenModal(true);
  };

  const handleEdit = (item) => {
    setFormData(item);
    setOpenModal(true);
  };

  const handleClone = (item) => {
    const clonedItem = { ...item, id: Date.now() }; // Generate new ID
    setData([...data, clonedItem]);
  };

  const handleDelete = (item) => {
    const newData = data.filter(d => d.id !== item.id);
    setData(newData);

    const newTotalPages = Math.ceil(newData.length / rowsPerPage);
    setPage(prevPage => {
      return (prevPage >= newTotalPages) ? Math.max(0, newTotalPages - 1) : prevPage;
    });
  };

  const handleSubmit = () => {
    if (formData.id) {
      setData(data.map(d => (d.id === formData.id ? formData : d)));
    } else {
      setData([...data, { ...formData, id: Date.now() }]);
    }
    setOpenModal(false);
  };

  return (
    <div>
      <CrudTable
        headers={['Name', 'Age', 'Email']}
        headerWidths={['w-1/3', 'w-1/4', 'w-1/3']}
        tableWidth="w-full"
        data={data}
        page={page}
        rowsPerPage={rowsPerPage}
        setPage={setPage}
        setRowsPerPage={setRowsPerPage}
        onAdd={handleAdd}
        onEdit={handleEdit}
        onClone={handleClone}
        onDelete={handleDelete}
      />

      <Dialog open={openModal} onClose={() => setOpenModal(false)}>
        <DialogTitle>{formData.id ? 'Edit Item' : 'Add Item'}</DialogTitle>
        <DialogContent>
          <TextField label="Name" fullWidth value={formData.Name} onChange={(e) => setFormData({ ...formData, Name: e.target.value })} />
          <TextField label="Age" fullWidth value={formData.Age} onChange={(e) => setFormData({ ...formData, Age: e.target.value })} />
          <TextField label="Email" fullWidth value={formData.Email} onChange={(e) => setFormData({ ...formData, Email: e.target.value })} />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenModal(false)}>Cancel</Button>
          <Button onClick={handleSubmit}>Save</Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default App;
```

### CrudTable Component

```tsx
import React from 'react';
import { Table, TableBody, TableCell, TableHead, TableRow, IconButton, Button, TablePagination } from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import CloneIcon from '@mui/icons-material/FileCopy';
import DeleteIcon from '@mui/icons-material/Delete';

const capitalize = (str: string) => {
  return str.replace(/\b(\w)/g, s => s.toUpperCase());
};

interface CrudTableProps {
  headers: string[];
  headerWidths: string[];
  tableWidth: string;
  data: any[];
  page: number;
  rowsPerPage: number;
  setPage: (page: number) => void;
  setRowsPerPage: (rowsPerPage: number) => void;
  onAdd: () => void;
  onEdit: (item: any) => void;
  onClone: (item: any) => void;
  onDelete: (item: any) => void;
}

const CrudTable: React.FC<CrudTableProps> = ({ headers, headerWidths, tableWidth, data, page, rowsPerPage, setPage, setRowsPerPage, onAdd, onEdit, onClone, onDelete }) => {
  const emptyRows = rowsPerPage
Sure, here's the continuation and completion of the `CrudTable` component:

```tsx
const CrudTable: React.FC<CrudTableProps> = ({ headers, headerWidths, tableWidth, data, page, rowsPerPage, setPage, setRowsPerPage, onAdd, onEdit, onClone, onDelete }) => {
  const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);

  return (
    <div className={tableWidth}>
      <Button onClick={onAdd} className="float-right mb-2">Add</Button>
      <Table>
        <TableHead>
          <TableRow>
            {headers.map((header, index) => (
              <TableCell key={header} className={headerWidths[index] || 'w-auto'}>
                {capitalize(header)}
              </TableCell>
            ))}
            <TableCell>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((item, index) => (
            <TableRow key={index}>
              {headers.map((header) => (
                <TableCell key={header}>{item[header]}</TableCell>
              ))}
              <TableCell>
                <IconButton onClick={() => onEdit(item)}><EditIcon /></IconButton>
                <IconButton onClick={() => onClone(item)}><CloneIcon /></IconButton>
                <IconButton onClick={() => onDelete(item)}><DeleteIcon /></IconButton>
              </TableCell>
            </TableRow>
          ))}
          {emptyRows > 0 && (
            <TableRow style={{ height: 53 * emptyRows }}>
              <TableCell colSpan={headers.length + 1} />
            </TableRow>
          )}
        </TableBody>
      </Table>
      <TablePagination
        component="div"
        count={data.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={(event, newPage) => setPage(newPage)}
        onRowsPerPageChange={(event) => setRowsPerPage(parseInt(event.target.value, 10))}
      />
    </div>
  );
};

export default CrudTable;
```

In this `CrudTable` component:

- The table's width and the width of each header cell are configurable via props.
- The component handles pagination, and it uses the `page`, `rowsPerPage`, `setPage`, and `setRowsPerPage` props to manage the display of data.
- The `capitalize` function is used to ensure that each header has its first letter in uppercase.
- Action buttons for edit, clone, and delete are provided for each row.

With these components (`App` and `CrudTable`), you have a flexible and functional table that supports CRUD operations with pagination and responsive design. The table's appearance and behavior can be easily adjusted through props, making it a reusable component in different parts of your application.
